// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Vite
// plugin that tells the Electron app where to look for the Vite-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_VITE_DEV_SERVER_URL: string;
declare const MAIN_WINDOW_VITE_NAME: string;

declare module "*.scss" {
  const content: Record<string, string>;
  export default content;
}

declare module "*.svg" {
  import * as React from "react";

  const ReactComponent: React.FunctionComponent<
    React.ComponentProps<"svg"> & { title?: string }
  >;

  export default ReactComponent;
}

interface ImportMetaEnv {
  readonly VITE_API_BASE_URL: string;
  // more env variables...
}

interface ImportMeta {
  readonly env: ImportMetaEnv;
}

type FileInfo = {
  name: string;
  path: string;
  size: number;
  mtime: Date | null;
  type: "file" | "folder";

  gameId?: string;
  gameName?: string;
  gameIconURL?: string;
};

type FolderInfo = {
  folder: string;
  files: FileInfo[];
};

type ElectronApiResponse<D> = {
  data: D | null;
  error?: string;
};

interface Window {
  electronAPI: {
    onDeepLink: (callback: (link: { url: string }) => void) => void;

    showFolderDialog: () => Promise<ElectronApiResponse<FolderInfo>>;

    getSavePaths: (
      paths: import("./types").GamePath[]
    ) => Promise<ElectronApiResponse<import("./types").GamePath[]>>;

    getFolderInfo: (
      folderPath: string
    ) => Promise<ElectronApiResponse<FolderInfo>>;

    uploadSave: (
      folder: {
        path: string;
        name: string;
      },
      game: import("./types").Game
    ) => Promise<
      ElectronApiResponse<{
        buffer: Buffer;
        gameStateValues: import("./types").GameStateValues;
      }>
    >;

    downloadSave: (archiveURL: string) => Promise<ElectronApiResponse<void>>;

    downloadAndExtractSave: (
      archiveURL: string,
      path: string
    ) => Promise<ElectronApiResponse<void>>;

    onGetSyncedSaves: (callback: () => void) => void;

    sendSyncedSaves: (
      args: import("./types").GameSave[]
    ) => Promise<ElectronApiResponse<void>>;
  };
}
